### From3D forward(x)
x.shape = torch.Size([1, 3, 1, 256, 256])
xx.shape = torch.Size([1, 3, 256, 256])

### image_to_nodes(x)
x.shape = torch.Size([8, 4, 3, 256, 256])
x.permute(0, 2, 1, 3, 4).shape = torch.Size([8, 3, 4, 256, 256])

### From3D forward(x)
x.shape = torch.Size([8, 3, 4, 256, 256])
xx = x.permute(0, 2, 1, 3, 4).contiguous().view(-1, C, h, w).shape = torch.Size([32, 3, 256, 256])

### back to image_to_nodes()
maps.shape (encoder output) = torch.Size([8, 512, 4, 32, 32])

### forward
len(q) = 8
len(q[0]) = 4
[y.shape for y in q[0]] = [torch.Size([45, 512]), torch.Size([45, 512]), torch.Size([46, 512]), torch.Size([48, 512])]

#### compute walks (affinity matrices)
len(As) = 8
len(As[0]) = 3      # T-1
[y.shape for y in As[0]] = [torch.Size([45, 45]), torch.Size([45, 46]), torch.Size([46, 48])]

#### compute stoch_mat
len(A12s) = 8
len(A12s[0]) = 3
[y.shape for y in A12s[0]] = [torch.Size([45, 45]), torch.Size([45, 46]), torch.Size([46, 48])]

#### Palindromes
len(A21s) = 8
len(A21s[0]) = 3
[y.shape for y in A21s[0]] = [torch.Size([45, 45]), torch.Size([46, 45]), torch.Size([48, 46])]

#### walks
len(AAs) = 8
len(AAs[0]) = 2
[y[1].shape for y in AAs[0]] = [torch.Size([45, 45]), torch.Size([45, 45])]

